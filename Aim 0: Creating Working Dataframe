{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# import data \n",
    "import pandas as pd\n",
    "S1 = pd.read_excel('pancancer1.xlsx')\n",
    "cosmic = pd.read_excel('COSMIC.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# merge dataframes\n",
    "cosmic[\"Ensembl gene id\"] = cosmic.Ensembl_gene_ID\n",
    "complete_data = cosmic.join(S1.set_index(\"Ensembl gene id\"), \"Ensembl gene id\", how=\"left\")\n",
    "complete_data = complete_data.groupby(\"Ensembl gene id\").first().reset_index()\n",
    "#clean up data and creating working dataframe \n",
    "delete = ['Ensembl gene id', 'Chromosome', 'Start_position', 'Variant id', 'End_position', 'Annotation_sites', 'Uniprots id', 'Gene symbol']\n",
    "working_data = complete_data.drop(columns = delete) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# create a numerical index for classifying base pair substitutions\n",
    "bp_sub = [0] * working_data.shape[0]\n",
    "# A, T, G, C\n",
    "#for i, r, in working_data.head(50).iterrows():\n",
    "    #print( r[\"Reference_nucleotide\"] ,r['Altered_nucleotide'])\n",
    "for i,ref in enumerate(working_data['Reference_nucleotide']):\n",
    "    if str(ref) == 'A' and str(working_data.loc[i, 'Altered_nucleotide']) == 'A':\n",
    "        bp_sub[i] = 0\n",
    "    elif str(ref) == 'A' and str(working_data.loc[i, 'Altered_nucleotide']) == 'T':\n",
    "        bp_sub[i] = 1\n",
    "    elif str(ref) == 'A' and str(working_data.loc[i, 'Altered_nucleotide']) == 'G':\n",
    "        bp_sub[i] = 2\n",
    "    elif str(ref) == 'A' and str(working_data.loc[i, 'Altered_nucleotide']) == 'C':\n",
    "        bp_sub[i] = 3\n",
    "    elif str(ref) == 'T' and str(working_data.loc[i, 'Altered_nucleotide']) == 'A':\n",
    "        bp_sub[i] = 4\n",
    "    elif str(ref) == 'T' and str(working_data.loc[i, 'Altered_nucleotide']) == 'T':\n",
    "        bp_sub[i] = 0\n",
    "    elif str(ref) == 'T' and str(working_data.loc[i, 'Altered_nucleotide']) == 'G':\n",
    "        bp_sub[i] = 5\n",
    "    elif str(ref) == 'T' and str(working_data.loc[i, 'Altered_nucleotide']) == 'C':\n",
    "        bp_sub[i] = 6\n",
    "    elif str(ref) == 'G' and str(working_data.loc[i, 'Altered_nucleotide']) == 'A':\n",
    "        bp_sub[i] = 7\n",
    "    elif str(ref) == 'G' and str(working_data.loc[i, 'Altered_nucleotide']) == 'T':\n",
    "        bp_sub[i] = 8\n",
    "    elif str(ref) == 'G' and str(working_data.loc[i, 'Altered_nucleotide']) == 'G':\n",
    "        bp_sub[i] = 0\n",
    "    elif str(ref) == 'G' and str(working_data.loc[i, 'Altered_nucleotide']) == 'C':\n",
    "        bp_sub[i] = 9\n",
    "    elif str(ref) == 'C' and str(working_data.loc[i, 'Altered_nucleotide']) == 'A':\n",
    "        bp_sub[i] = 10\n",
    "    elif str(ref) == 'C' and str(working_data.loc[i, 'Altered_nucleotide']) == 'T':\n",
    "        bp_sub[i] = 11\n",
    "    elif str(ref) == 'C' and str(working_data.loc[i, 'Altered_nucleotide']) == 'G':\n",
    "        bp_sub[i] = 12\n",
    "    elif str(ref) == 'C' and str(working_data.loc[i, 'Altered_nucleotide']) == 'C':\n",
    "        bp_sub[i] = 0\n",
    "working_data['Base Pair Substitutions'] = bp_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reference_nucleotide</th>\n",
       "      <th>Altered_nucleotide</th>\n",
       "      <th>Ensembl_gene_ID</th>\n",
       "      <th>Amino_acid_substitution</th>\n",
       "      <th>PON-P2_predicted_probability</th>\n",
       "      <th>PON-P2_error</th>\n",
       "      <th>PON-P2_classification</th>\n",
       "      <th>Frequency_in_COSMIC</th>\n",
       "      <th>Neoantigen freq</th>\n",
       "      <th>Variant freq</th>\n",
       "      <th>Protein length</th>\n",
       "      <th>Length-normalized variant freq</th>\n",
       "      <th>Base Pair Substitutions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>T</td>\n",
       "      <td>ENSG00000000457</td>\n",
       "      <td>R61C</td>\n",
       "      <td>0.950</td>\n",
       "      <td>0.022</td>\n",
       "      <td>Pathogenic</td>\n",
       "      <td>6</td>\n",
       "      <td>919.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>742.0</td>\n",
       "      <td>0.071429</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>G</td>\n",
       "      <td>A</td>\n",
       "      <td>ENSG00000000460</td>\n",
       "      <td>V383I</td>\n",
       "      <td>0.009</td>\n",
       "      <td>0.006</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A</td>\n",
       "      <td>G</td>\n",
       "      <td>ENSG00000000938</td>\n",
       "      <td>R26G</td>\n",
       "      <td>0.493</td>\n",
       "      <td>0.064</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>492.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>529.0</td>\n",
       "      <td>0.105860</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>G</td>\n",
       "      <td>A</td>\n",
       "      <td>ENSG00000000971</td>\n",
       "      <td>V72I</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.025</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>3</td>\n",
       "      <td>3043.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>1231.0</td>\n",
       "      <td>0.061738</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A</td>\n",
       "      <td>G</td>\n",
       "      <td>ENSG00000001036</td>\n",
       "      <td>R159G</td>\n",
       "      <td>0.278</td>\n",
       "      <td>0.112</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>664.0</td>\n",
       "      <td>132.0</td>\n",
       "      <td>467.0</td>\n",
       "      <td>0.282655</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Reference_nucleotide Altered_nucleotide  Ensembl_gene_ID  \\\n",
       "0                    C                  T  ENSG00000000457   \n",
       "1                    G                  A  ENSG00000000460   \n",
       "2                    A                  G  ENSG00000000938   \n",
       "3                    G                  A  ENSG00000000971   \n",
       "4                    A                  G  ENSG00000001036   \n",
       "\n",
       "  Amino_acid_substitution  PON-P2_predicted_probability  PON-P2_error  \\\n",
       "0                    R61C                         0.950         0.022   \n",
       "1                   V383I                         0.009         0.006   \n",
       "2                    R26G                         0.493         0.064   \n",
       "3                    V72I                         0.077         0.025   \n",
       "4                   R159G                         0.278         0.112   \n",
       "\n",
       "  PON-P2_classification  Frequency_in_COSMIC  Neoantigen freq  Variant freq  \\\n",
       "0            Pathogenic                    6            919.0          53.0   \n",
       "1               Neutral                    3              NaN           NaN   \n",
       "2               Unknown                    1            492.0          56.0   \n",
       "3               Neutral                    3           3043.0          76.0   \n",
       "4               Unknown                    3            664.0         132.0   \n",
       "\n",
       "   Protein length  Length-normalized variant freq  Base Pair Substitutions  \n",
       "0           742.0                        0.071429                       11  \n",
       "1             NaN                             NaN                        7  \n",
       "2           529.0                        0.105860                        2  \n",
       "3          1231.0                        0.061738                        7  \n",
       "4           467.0                        0.282655                        2  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "working_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# create a numberical index for pathogenicity classification\n",
    "pathogenicity_classification = []\n",
    "for pathogenicity in working_data['PON-P2_classification']:\n",
    "    if str(pathogenicity) == 'Pathogenic':\n",
    "        pathogenicity_classification.append(1)\n",
    "    else:\n",
    "        pathogenicity_classification.append(0)\n",
    "working_data['Pathogenicity Classification'] = pathogenicity_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "aa_classification = []\n",
    "np_neutral = ['W', 'F', 'G', 'A', 'V', 'I', 'L', 'M', 'P']\n",
    "p_neutral = ['Y', 'S', 'T', 'N', 'Q', 'C']\n",
    "p_acidic = ['D', 'E']\n",
    "p_basic = ['R', 'K', 'H']\n",
    "for aminoacid in working_data['Amino_acid_substitution']:\n",
    "    wt_aa = str(aminoacid)[0]\n",
    "    mut_aa = str(aminoacid)[-1]\n",
    "    if wt_aa in np_neutral and mut_aa in p_neutral:\n",
    "        aa_classification.append(1)\n",
    "    elif wt_aa in np_neutral and mut_aa in p_acidic:\n",
    "        aa_classification.append(2)\n",
    "    elif wt_aa in np_neutral and mut_aa in p_basic:\n",
    "        aa_classification.append(3)\n",
    "    elif wt_aa in p_neutral and mut_aa in np_neutral:\n",
    "        aa_classification.append(4)\n",
    "    elif wt_aa in p_neutral and mut_aa in p_acidic:\n",
    "        aa_classification.append(5)\n",
    "    elif wt_aa in p_neutral and mut_aa in p_basic:\n",
    "        aa_classification.append(6)\n",
    "    elif wt_aa in p_acidic and mut_aa in np_neutral:\n",
    "        aa_classification.append(7)\n",
    "    elif wt_aa in p_acidic and mut_aa in p_neutral:\n",
    "        aa_classification.append(8)\n",
    "    elif wt_aa in p_acidic and mut_aa in p_basic:\n",
    "        aa_classification.append(9)\n",
    "    elif wt_aa in p_basic and mut_aa in np_neutral:\n",
    "        aa_classification.append(10)\n",
    "    elif wt_aa in p_basic and mut_aa in p_neutral:\n",
    "        aa_classification.append(11)\n",
    "    elif wt_aa in p_basic and mut_aa in p_acidic:\n",
    "        aa_classification.append(12)\n",
    "    else:\n",
    "        aa_classification.append(0)\n",
    "working_data['Amino Acid Classification'] = aa_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Base-Pair Sub Key\n",
    "import pandas as pd\n",
    "key = pd.DataFrame(data = ['None','A to T', 'A to G', 'A to C', 'T to A', 'T to G', 'T to C', 'G to A', 'G to T', 'G to C', 'C to A', 'C to T', 'C to G'], columns = ['Base Pair Substitution'], index  = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n",
    "key['Pathogenicity'] = ['Pathogenic', 'Neutral/Unknown', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']\n",
    "key['Amino Acid Sub'] = ['None', 'NP neutral to P neutral', 'NP neutral to P acidic', 'NP neutral to P basic', 'P neutral to NP neutral', 'P neutral to P acidic', 'P neutral to P basic', 'P acidic to NP neutral', 'P acidic to P neutral', 'P acidic to P basic', 'P basic to NP neutral', 'P basic to P neutral', 'P basic to P acidic']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "numerical_data = working_data.drop(columns = ['Reference_nucleotide', 'Altered_nucleotide', 'PON-P2_classification'])\n",
    "working_data.sort_values(by = 'Ensembl_gene_ID', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
